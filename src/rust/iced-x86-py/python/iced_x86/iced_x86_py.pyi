#
# Copyright (C) 2018-2019 de4dot@gmail.com
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

from collections.abc import Iterator
from enum import IntEnum, IntFlag
from typing import Any, final, List, Optional, Union

# pylint: disable=unsubscriptable-object

@final
class Code(IntEnum): ...
@final
class CodeSize(IntEnum): ...
@final
class ConditionCode(IntEnum): ...
@final
class CpuidFeature(IntEnum): ...
@final
class DecoderOptions(IntFlag):
	Nothing = 0
	...
@final
class EncodingKind(IntEnum): ...
@final
class FlowControl(IntEnum): ...
@final
class MemorySize(IntEnum): ...
@final
class Mnemonic(IntEnum): ...
@final
class OpKind(IntEnum): ...
@final
class Register(IntEnum): ...
@final
class RoundingControl(IntEnum): ...

@final
class OpCodeInfo: ...

@final
class ConstantOffsets:
	@property
	def displacement_offset(self) -> int: ...
	@property
	def displacement_size(self) -> int: ...
	@property
	def immediate_offset(self) -> int: ...
	@property
	def immediate_size(self) -> int: ...
	@property
	def immediate_offset2(self) -> int: ...
	@property
	def immediate_size2(self) -> int: ...
	@property
	def has_displacement(self) -> bool: ...
	@property
	def has_immediate(self) -> bool: ...
	@property
	def has_immediate2(self) -> bool: ...
	def __eq__(self, other: Any) -> bool: ...
	def __ne__(self, other: Any) -> bool: ...
	def __hash__(self) -> int: ...

@final
class FpuStackIncrementInfo:
	def __init__(self, increment: int, conditional: bool, writes_top: bool) -> None: ...
	@property
	def increment(self) -> int: ...
	@property
	def conditional(self) -> bool: ...
	@property
	def writes_top(self) -> bool: ...

@final
class Instruction:
	def __new__(self) -> Instruction: ...	# pylint: disable=undefined-variable
	def __len__(self) -> int: ...
	def __init__(self) -> None: ...
	def __copy__(self) -> Instruction: ...
	def __deepcopy__(self, memo: Any) -> Instruction: ...
	def clone(self) -> Instruction: ...
	def eq_all_bits(self, other: Instruction) -> bool: ...
	@property
	def ip16(self) -> int: ...
	@ip16.setter
	def ip16(self, new_value: int) -> None: ...
	@property
	def ip32(self) -> int: ...
	@ip32.setter
	def ip32(self, new_value: int) -> None: ...
	@property
	def ip(self) -> int: ...
	@ip.setter
	def ip(self, new_value: int) -> None: ...
	@property
	def next_ip16(self) -> int: ...
	@next_ip16.setter
	def next_ip16(self, new_value: int) -> None: ...
	@property
	def next_ip32(self) -> int: ...
	@next_ip32.setter
	def next_ip32(self, new_value: int) -> None: ...
	@property
	def next_ip(self) -> int: ...
	@next_ip.setter
	def next_ip(self, new_value: int) -> None: ...
	@property
	def code_size(self) -> CodeSize: ...
	@code_size.setter
	def code_size(self, new_value: CodeSize) -> None: ...
	@property
	def is_invalid(self) -> bool: ...
	@property
	def code(self) -> Code: ...
	@code.setter
	def code(self, new_value: Code) -> None: ...
	@property
	def mnemonic(self) -> Mnemonic: ...
	@property
	def op_count(self) -> int: ...
	@property
	def len(self) -> int: ...
	@len.setter
	def len(self, new_value: int) -> None: ...
	@property
	def has_xacquire_prefix(self) -> bool: ...
	@has_xacquire_prefix.setter
	def has_xacquire_prefix(self, new_value: bool) -> None: ...
	@property
	def has_xrelease_prefix(self) -> bool: ...
	@has_xrelease_prefix.setter
	def has_xrelease_prefix(self, new_value: bool) -> None: ...
	@property
	def has_rep_prefix(self) -> bool: ...
	@has_rep_prefix.setter
	def has_rep_prefix(self, new_value: bool) -> None: ...
	@property
	def has_repe_prefix(self) -> bool: ...
	@has_repe_prefix.setter
	def has_repe_prefix(self, new_value: bool) -> None: ...
	@property
	def has_repne_prefix(self) -> bool: ...
	@has_repne_prefix.setter
	def has_repne_prefix(self, new_value: bool) -> None: ...
	@property
	def has_lock_prefix(self) -> bool: ...
	@has_lock_prefix.setter
	def has_lock_prefix(self, new_value: bool) -> None: ...
	@property
	def op0_kind(self) -> OpKind: ...
	@op0_kind.setter
	def op0_kind(self, new_value: OpKind) -> None: ...
	@property
	def op1_kind(self) -> OpKind: ...
	@op1_kind.setter
	def op1_kind(self, new_value: OpKind) -> None: ...
	@property
	def op2_kind(self) -> OpKind: ...
	@op2_kind.setter
	def op2_kind(self, new_value: OpKind) -> None: ...
	@property
	def op3_kind(self) -> OpKind: ...
	@op3_kind.setter
	def op3_kind(self, new_value: OpKind) -> None: ...
	@property
	def op4_kind(self) -> OpKind: ...
	@op4_kind.setter
	def op4_kind(self, new_value: OpKind) -> None: ...
	def op_kind(self, operand: int) -> OpKind: ...
	def set_op_kind(self, operand: int, op_kind: OpKind) -> None: ...
	@property
	def has_segment_prefix(self) -> bool: ...
	@property
	def segment_prefix(self) -> Register: ...
	@segment_prefix.setter
	def segment_prefix(self, new_value: Register) -> None: ...
	@property
	def memory_segment(self) -> Register: ...
	@property
	def memory_displ_size(self) -> int: ...
	@memory_displ_size.setter
	def memory_displ_size(self, new_value: int) -> None: ...
	@property
	def is_broadcast(self) -> bool: ...
	@is_broadcast.setter
	def is_broadcast(self, new_value: bool) -> None: ...
	@property
	def memory_size(self) -> MemorySize: ...
	@property
	def memory_index_scale(self) -> int: ...
	@memory_index_scale.setter
	def memory_index_scale(self, new_value: int) -> None: ...
	@property
	def memory_displacement(self) -> int: ...
	@memory_displacement.setter
	def memory_displacement(self, new_value: int) -> None: ...
	@property
	def memory_displacement64(self) -> int: ...
	def immediate(self, operand: int) -> int: ...
	def set_immediate_i32(self, operand: int, new_value: int) -> None: ...
	def set_immediate_u32(self, operand: int, new_value: int) -> None: ...
	def set_immediate_i64(self, operand: int, new_value: int) -> None: ...
	def set_immediate_u64(self, operand: int, new_value: int) -> None: ...
	@property
	def immediate8(self) -> int: ...
	@immediate8.setter
	def immediate8(self, new_value: int) -> None: ...
	@property
	def immediate8_2nd(self) -> int: ...
	@immediate8_2nd.setter
	def immediate8_2nd(self, new_value: int) -> None: ...
	@property
	def immediate16(self) -> int: ...
	@immediate16.setter
	def immediate16(self, new_value: int) -> None: ...
	@property
	def immediate32(self) -> int: ...
	@immediate32.setter
	def immediate32(self, new_value: int) -> None: ...
	@property
	def immediate64(self) -> int: ...
	@immediate64.setter
	def immediate64(self, new_value: int) -> None: ...
	@property
	def immediate8to16(self) -> int: ...
	@immediate8to16.setter
	def immediate8to16(self, new_value: int) -> None: ...
	@property
	def immediate8to32(self) -> int: ...
	@immediate8to32.setter
	def immediate8to32(self, new_value: int) -> None: ...
	@property
	def immediate8to64(self) -> int: ...
	@immediate8to64.setter
	def immediate8to64(self, new_value: int) -> None: ...
	@property
	def immediate32to64(self) -> int: ...
	@immediate32to64.setter
	def immediate32to64(self, new_value: int) -> None: ...
	@property
	def memory_address64(self) -> int: ...
	@memory_address64.setter
	def memory_address64(self, new_value: int) -> None: ...
	@property
	def near_branch16(self) -> int: ...
	@near_branch16.setter
	def near_branch16(self, new_value: int) -> None: ...
	@property
	def near_branch32(self) -> int: ...
	@near_branch32.setter
	def near_branch32(self, new_value: int) -> None: ...
	@property
	def near_branch64(self) -> int: ...
	@near_branch64.setter
	def near_branch64(self, new_value: int) -> None: ...
	@property
	def near_branch_target(self) -> int: ...
	@property
	def far_branch16(self) -> int: ...
	@far_branch16.setter
	def far_branch16(self, new_value: int) -> None: ...
	@property
	def far_branch32(self) -> int: ...
	@far_branch32.setter
	def far_branch32(self, new_value: int) -> None: ...
	@property
	def far_branch_selector(self) -> int: ...
	@far_branch_selector.setter
	def far_branch_selector(self, new_value: int) -> None: ...
	@property
	def memory_base(self) -> Register: ...
	@memory_base.setter
	def memory_base(self, new_value: Register) -> None: ...
	@property
	def memory_index(self) -> Register: ...
	@memory_index.setter
	def memory_index(self, new_value: Register) -> None: ...
	@property
	def op0_register(self) -> Register: ...
	@op0_register.setter
	def op0_register(self, new_value: Register) -> None: ...
	@property
	def op1_register(self) -> Register: ...
	@op1_register.setter
	def op1_register(self, new_value: Register) -> None: ...
	@property
	def op2_register(self) -> Register: ...
	@op2_register.setter
	def op2_register(self, new_value: Register) -> None: ...
	@property
	def op3_register(self) -> Register: ...
	@op3_register.setter
	def op3_register(self, new_value: Register) -> None: ...
	@property
	def op4_register(self) -> Register: ...
	@op4_register.setter
	def op4_register(self, new_value: Register) -> None: ...
	def op_register(self, operand: int) -> Register: ...
	def set_op_register(self, operand: int, new_value: Register) -> None: ...
	@property
	def op_mask(self) -> Register: ...
	@op_mask.setter
	def op_mask(self, new_value: Register) -> None: ...
	@property
	def has_op_mask(self) -> bool: ...
	@property
	def zeroing_masking(self) -> bool: ...
	@zeroing_masking.setter
	def zeroing_masking(self, new_value: bool) -> None: ...
	@property
	def merging_masking(self) -> bool: ...
	@merging_masking.setter
	def merging_masking(self, new_value: bool) -> None: ...
	@property
	def rounding_control(self) -> RoundingControl: ...
	@rounding_control.setter
	def rounding_control(self, new_value: RoundingControl) -> None: ...
	@property
	def declare_data_len(self) -> int: ...
	@declare_data_len.setter
	def declare_data_len(self, new_value: int) -> None: ...
	def set_declare_byte_value_i8(self, index: int, new_value: int) -> None: ...
	def set_declare_byte_value(self, index: int, new_value: int) -> None: ...
	def get_declare_byte_value(self, index: int) -> int: ...
	def set_declare_word_value_i16(self, index: int, new_value: int) -> None: ...
	def set_declare_word_value(self, index: int, new_value: int) -> None: ...
	def get_declare_word_value(self, index: int) -> int: ...
	def set_declare_dword_value_i32(self, index: int, new_value: int) -> None: ...
	def set_declare_dword_value(self, index: int, new_value: int) -> None: ...
	def get_declare_dword_value(self, index: int) -> int: ...
	def set_declare_qword_value_i64(self, index: int, new_value: int) -> None: ...
	def set_declare_qword_value(self, index: int, new_value: int) -> None: ...
	def get_declare_qword_value(self, index: int) -> int: ...
	@property
	def is_vsib(self) -> bool: ...
	@property
	def is_vsib32(self) -> bool: ...
	@property
	def is_vsib64(self) -> bool: ...
	@property
	def vsib(self) -> Optional[bool]: ...
	@property
	def suppress_all_exceptions(self) -> bool: ...
	@suppress_all_exceptions.setter
	def suppress_all_exceptions(self, new_value: bool) -> None: ...
	@property
	def is_ip_rel_memory_operand(self) -> bool: ...
	@property
	def ip_rel_memory_address(self) -> int: ...
	def try_virtual_address(self, operand: int, element_index: int) -> Optional[int]: ...
	@property
	def stack_pointer_increment(self) -> int: ...
	def fpu_stack_increment_info(self) -> FpuStackIncrementInfo: ...
	@property
	def encoding(self) -> EncodingKind: ...
	def cpuid_features(self) -> List[CpuidFeature]: ...
	@property
	def flow_control(self) -> FlowControl: ...
	@property
	def is_privileged(self) -> bool: ...
	@property
	def is_stack_instruction(self) -> bool: ...
	@property
	def is_save_restore_instruction(self) -> bool: ...
	@property
	def rflags_read(self) -> int: ...
	@property
	def rflags_written(self) -> int: ...
	@property
	def rflags_cleared(self) -> int: ...
	@property
	def rflags_set(self) -> int: ...
	@property
	def rflags_undefined(self) -> int: ...
	@property
	def rflags_modified(self) -> int: ...
	@property
	def is_jcc_short_or_near(self) -> bool: ...
	@property
	def is_jcc_near(self) -> bool: ...
	@property
	def is_jcc_short(self) -> bool: ...
	@property
	def is_jmp_short(self) -> bool: ...
	@property
	def is_jmp_near(self) -> bool: ...
	@property
	def is_jmp_short_or_near(self) -> bool: ...
	@property
	def is_jmp_far(self) -> bool: ...
	@property
	def is_call_near(self) -> bool: ...
	@property
	def is_call_far(self) -> bool: ...
	@property
	def is_jmp_near_indirect(self) -> bool: ...
	@property
	def is_jmp_far_indirect(self) -> bool: ...
	@property
	def is_call_near_indirect(self) -> bool: ...
	@property
	def is_call_far_indirect(self) -> bool: ...
	def negate_condition_code(self) -> None: ...
	def as_short_branch(self) -> None: ...
	def as_near_branch(self) -> None: ...
	@property
	def condition_code(self) -> ConditionCode: ...
	@property
	def op_code(self) -> OpCodeInfo: ...
	def __repr__(self) -> str: ...
	def __str__(self) -> str: ...
	def __format__(self, format_spec: str) -> str: ...
	def __eq__(self, other: Any) -> bool: ...
	def __ne__(self, other: Any) -> bool: ...
	def __hash__(self) -> int: ...
	def __bool__(self) -> bool: ...


@final
class Decoder:
	def __init__(self, bitness: int, data: Union[bytes, bytearray], options: DecoderOptions = DecoderOptions.Nothing) -> None: ...
	@property
	def ip(self) -> int: ...
	@ip.setter
	def ip(self, new_value: int) -> None: ...
	@property
	def bitness(self) -> int: ...
	@property
	def max_position(self) -> int: ...
	@property
	def position(self) -> int: ...
	@position.setter
	def position(self, new_pos: int) -> None: ...
	@property
	def can_decode(self) -> bool: ...
	@property
	def last_error(self) -> int: ...
	def decode(self) -> Instruction: ...
	def decode_out(self, instruction: Instruction) -> None: ...
	def get_constant_offsets(self, instruction: Instruction) -> ConstantOffsets: ...
	def __iter__(self) -> Iterator[Instruction]: ...
