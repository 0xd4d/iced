// SPDX-License-Identifier: MIT
// Copyright wtfsckgh@gmail.com
// Copyright iced contributors

#![allow(unused_results)]

use super::super::super::FlowControl;
#[cfg(not(feature = "std"))]
use hashbrown::HashMap;
#[cfg(feature = "std")]
use std::collections::HashMap;

lazy_static! {
	pub(super) static ref TO_FLOW_CONTROL_HASH: HashMap<&'static str, FlowControl> = {
		// GENERATOR-BEGIN: FlowControlHash
		// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
		let mut h = HashMap::with_capacity(10);
		h.insert("Next", FlowControl::Next);
		h.insert("UnconditionalBranch", FlowControl::UnconditionalBranch);
		h.insert("IndirectBranch", FlowControl::IndirectBranch);
		h.insert("ConditionalBranch", FlowControl::ConditionalBranch);
		h.insert("Return", FlowControl::Return);
		h.insert("Call", FlowControl::Call);
		h.insert("IndirectCall", FlowControl::IndirectCall);
		h.insert("Interrupt", FlowControl::Interrupt);
		h.insert("XbeginXabortXend", FlowControl::XbeginXabortXend);
		h.insert("Exception", FlowControl::Exception);
		// GENERATOR-END: FlowControlHash
		h
	};
}
